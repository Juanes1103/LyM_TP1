/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Tortuga)package Tortuga;

public class Tortuga{  public static void main(String args []) throws ParseException  {    Tortuga parser = new Tortuga(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression: ");      try      {        switch (Tortuga.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        Tortuga.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(Tortuga)

/*
GRAMATICA TORTUGA:

1. Logo de la Tortuga

forward N: Hace que la tortuga se mueva hacia adelante, en este caso N indica la distancia a la que se va a mover.
		   En caso de que N sea negativa se movera en la dirección opuesta.
left N: Hace que la tortuga gire hacia la izquierda N grados. En caso de que N sea negativa, la tortuga se gira
		en la dirección opuesta N grados.
right N: Hace que la tortuga gire hacia la derecha N grados. En caso de que N sea negativa, la tortuga se gira
		en la dirección opuesta N grados.
clearscreen: Limpia la pantalla donde se encuentra la tortuga.

fd N: Es la abreviación de forward N, cumple el mismo proposito de este.
lt N: Es la abreviación de left N, cumple el mismo proposito de este.
rt N: Es la abreviación de right N, cumple el mismo proposito de este.
cs: Es la abreviación de clearscreen, cumple el mismo proposito de este.

2. Controlar la Tortuga y el Lápiz

penup: Hace que el lápiz se levante, y no se marque ningún movimiento
pendown : Hace que el lápiz vuelva a su sitio, se vuelven a marcar los movimientos
hideturtle: Hace que la tortuga se esconda, se puede seguir moviendo pero no se ve en el cuadro
showturtle: Hace que la trotuga aparezca, se vuelve a ver la tortuga dentro del cuadro

3. Mundo de la Tortuga

home: Devuelve la tortuga al punto inicial del cuadro (0, 0)
setx N: Mueve la tortuga a la cordenada N en el eje x
sety N: Mueve la tortuga a la cordenada N en el eje y
setxy N M: Mueve la tortuga a la cordenada N en el eje x y a la cordenada M en el eje y
setheading N: Gira la tortuga para que apunte al angulo N
arc N M: Crea un arco con un angulo de N y un radio de M
changeshape N: Cambia la forma de la tortuga donde N es el id o el nombre de la figura a cambiar

seth N: Es la abreviación de setheading N, cumple el mismo proposito que este
csh N: Es la abreviación de changeshape N, cumple el mismo proposito que este

4. Respuesta de la tortuga

pos: Regresa las coordenadas (x, y) de donde se encuentra ubicada la tortuga
xcor: Regresa la coordenada x de la tortuga
ycor: Regresa la coordenada y de la tortuga
heading: Regresa la dirección en grados de hacia donde esta apuntando la tortuga
towards list X Y: Regresa el angulo al cual debe apuntar la tortuga para llegar a las coordenadas (X, Y)

5. Labels

label N: Hace que la tortuga escriba el string N que se le proporciona, en la dirección en la que apunta la tortuga
setlabelheight N: Establece el tamaño del texto a N, donde N es un entero positivo

6. Loops

repeat N [P]: Repite N veces el procedimiento P
back N: Mueve la tortuga N unidades para atrás

bk: Abreviación del proceso back, cumple el mismo propósito que este

7. Poligonos

Por medio de la implementación de los loops y los comandos básicos es posible dibujar formas

8. Tamaño del lápiz

setwidth N: Establece el ancho del lápiz a N

9. Enseñarle a la tortuga

to W P end: Crea un nuevo procedimiento llamado W en el cual se realizan las accciones P

10. Colores

setcolor N: Cambia el color del lápiz usando N como el ID del color a cambiar, N se encuentra entre 1 y 15
print S: Imprime S en el cuadro de la tortuga, S puede ser una palabra o un comando de los que regresa un valor
random N: Escoge un número aleatorio entre 0 y N-1

11. Variables

make "T V: Crea la variable T y le asigna el valor V, para acceder al valor de las variables se usa :T
sum A B: Suma  X y Y (X+Y)
difference A B: Resta A y B (A-B)

12. Procedimientos

to W :X :Y P end: Realiza el procedimiento W usando los parametros X, Y

13. For Loop

for [V X Y A][P]: Realiza el procedimiento P usando como contador la variable V, que va de X a Y y crece por A

14. Recursión

to N X P X end: Realizar el procedimiento P usando el valor de X

15. EXTRAS

if C [P]: Realiza la verificación de que la condición se cumpla y luego realiza el proceso P
*/
SKIP :
{
 "\n"
| "."
| "\r"
}

TOKEN : /* Comandos Básicos */
{
  < FORWARD : <OPF>< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+) >
| < BACK : < OPB >< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+)>
| < TURN : < OPT >< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+) >

| < CLEARSCREEN : < OPCS >>
| < PENUP : "penup" >
| < PENDOWN : "pendown" >
| < HIDE : "hideturtle" >
| < SHOW : "showturtle" >

| < HOME : "home">
| < SETX : "setx"< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+) >
| < SETY : "sety"< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+) >
| < SETXY : "setxy"< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+)< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+)>
| < SETHEADING : < OPSETH >< SIGN >(< DIGIT >)+>

| < ARC : "arc"< SIGN >((< DIGIT >)+|(< LETTER >)+)< SIGN >((< DIGIT >)+|(< LETTER >)+)>
| < CHANGESHAPE : < OPCSH >< SIGN >((< SIGN >(< LETTER >)+)|(< DIGIT >)+)>

| < POSITION : "pos" >
| < XCOR : "xcor" >
| < YCOR : "ycor" >
| < HEADING : "heading" >
| < TOWARDS : "towards list"< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+)< SIGN >(< SIGN >)?((< DIGIT >)+|(< LETTER >)+)>

| < LABEL : "label"< SIGN >< SIGN >(< LETTER >)+>
| < FONT : "setlabelheight"< SIGN >(< DIGIT >)+>

| < WIDTH : "setwidth"< SIGN >(< DIGIT >)+ >

| < TO : "to"< SIGN >(< LETTER >)+< SIGN > ((< LETTER >)+|(< SIGN >)+|(< DIGIT >)+)+ < SIGN >"end">
| < COLOR : "setcolor"< SIGN >(< DIGIT >)+>
| < PRINT : "print"< SIGN >(< SIGN >)?((< LETTER >)+|(< SIGN >)+|(< DIGIT >)+)+>
| < RANDOM : "random"< SIGN >(< DIGIT >)+>

| < MAKE : "make"< SIGN >< SIGN >(< LETTER >)+< SIGN >(< DIGIT >)+ >
| < SUM : "sum"< SIGN >(< DIGIT >)+< SIGN >(< DIGIT >)+>
| < DIFFERENCE : "difference"< SIGN >(< DIGIT >)+< SIGN >(< DIGIT >)+>
}

TOKEN : /* OPCIONES */
{
  < OPF : ("forward" | "fd") >
| < OPB : ("back" | "bk") >  
| < OPT : ("left" | "right" | "rt" | "lt") >
| < OPCS : ("clearscreen" | "cs") >
| < OPSETH : ("setheading" | "seth") >
| < OPCSH : ("changeshape" | "csh") >
}

TOKEN : //Loops
{
  < LOOP : "repeat"< SIGN >(< DIGIT >)+< SIGN >((< LETTER >)+< SIGN >(< DIGIT >)+)*< SIGN >>
| < FOR : "for"< SIGN >< SIGN >((< LETTER >)+|(< DIGIT >)+)*< SIGN >< SIGN >< SIGN >(< LETTER >)+ < SIGN >(< LETTER >)+< SIGN >>
| < IF : "if" < SIGN >((< SIGN >)?(< LETTER >)+|(< DIGIT >)+)(< SIGN >)+((< LETTER >)+|(< DIGIT >)+)< SIGN >< SIGN >((< SIGN >)?(< LETTER >)+ < SIGN > | (< SIGN >)?(< LETTER >)+< SIGN >(< DIGIT >)+< SIGN >)+ >
}
TOKEN :{ < CONSTANT : (< DIGIT >)+ >
| < WORD : (< LETTER >)+ >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : (["a" - "z"]|["A"-"Z"])>
| < SIGN : ("-"|"\""|":"|" "|"["|"]"|"="|"<"|">"|"/"|"+"|"*") >| < JUMP : ("\n"|".") >
}
int one_line() :{}{   (< FORWARD > | < BACK > | < TURN > | < CLEARSCREEN >
    | < PENUP > | < PENDOWN > | < HIDE > | < SHOW >
    | < HOME > | < SETX > | < SETY > | < SETXY > | < SETHEADING >
    | < ARC > | < CHANGESHAPE > | < POSITION > | < XCOR >
    | < YCOR > | < HEADING > | < TOWARDS > | < LABEL > | < FONT >
    | < WIDTH > | < COLOR >| < RANDOM > | < SUM > | < DIFFERENCE >
    | < TO > | < PRINT >  | < MAKE > | < LOOP > | < FOR >
    | < IF >| < JUMP > | < SIGN >| < CONSTANT > | < WORD >)  {    return 0;  }| "DONE!"  {    return 1;  }}